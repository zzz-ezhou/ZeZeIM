// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	gmemberFieldNames          = builder.RawFieldNames(&Gmember{})
	gmemberRows                = strings.Join(gmemberFieldNames, ",")
	gmemberRowsExpectAutoSet   = strings.Join(stringx.Remove(gmemberFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	gmemberRowsWithPlaceHolder = strings.Join(stringx.Remove(gmemberFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	gmemberModel interface {
		Insert(ctx context.Context, data *Gmember) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Gmember, error)
		Update(ctx context.Context, data *Gmember) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGmemberModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Gmember struct {
		Id        int64        `db:"id"`
		Gid       int64        `db:"gid"`
		Uid       int64        `db:"uid"`
		CreatedAt sql.NullTime `db:"created_at"`
		UpdatedAt sql.NullTime `db:"updated_at"`
	}
)

func newGmemberModel(conn sqlx.SqlConn) *defaultGmemberModel {
	return &defaultGmemberModel{
		conn:  conn,
		table: "`gmember`",
	}
}

func (m *defaultGmemberModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGmemberModel) FindOne(ctx context.Context, id int64) (*Gmember, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", gmemberRows, m.table)
	var resp Gmember
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGmemberModel) Insert(ctx context.Context, data *Gmember) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, gmemberRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Gid, data.Uid)
	return ret, err
}

func (m *defaultGmemberModel) Update(ctx context.Context, data *Gmember) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, gmemberRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Gid, data.Uid, data.Id)
	return err
}

func (m *defaultGmemberModel) tableName() string {
	return m.table
}
